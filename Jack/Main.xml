<?xml version="1.0" encoding="UTF-8"?>
<class>
<keyword>class</keyword>
<className><identifier>Countdown</identifier>
</className>
<symbol>{</symbol>
<subroutineDec>
<keyword>function</keyword>
<keyword>void</keyword>
<subroutineName><identifier>start</identifier>
</subroutineName>
<symbol>(</symbol>
<parameterList>
<type>
<keyword>int</keyword>
</type>
<varName><identifier>startNumber</identifier>
</varName>
</parameterList>
<symbol>)</symbol>
<subroutineBody>
<symbol>{</symbol>
<varDec>
<keyword>var</keyword>
<type>
<keyword>int</keyword>
</type>
<varName><identifier>i</identifier>
</varName>
<symbol>;</symbol>
</varDec>
<statements>
<statement>
<letStatement>
<keyword>let</keyword>
<varName><identifier>i</identifier>
</varName>
<symbol>=</symbol>
<expression>
<term>
<varName><identifier>startNumber</identifier>
</varName>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
</statement>
<statement>
<whileStatement>
<keyword>while</keyword>
<symbol>(</symbol>
<expression>
<term>
<varName><identifier>i</identifier>
</varName>
</term>
<op>
<symbol>></symbol>
</op>
<term>
<IntegerConstant>0</IntegerConstant>
</term>
</expression>
<symbol>)</symbol>
<symbol>{</symbol>
<statements>
<statement>
<doStatement>
<keyword>do</keyword>
<subroutineCall>
<identifier>Output</identifier>
<symbol>.</symbol>
<identifier>printString</identifier>
<symbol>(</symbol>
<expressionList>
<expression>
<term>
<varName><identifier>i</identifier>
</varName>
</term>
</expression>
</expressionList>
<symbol>)</symbol>
</subroutineCall>
<symbol>;</symbol>
</doStatement>
</statement>
<statement>
<letStatement>
<keyword>let</keyword>
<varName><identifier>i</identifier>
</varName>
<symbol>=</symbol>
<expression>
<term>
<varName><identifier>i</identifier>
</varName>
</term>
<op>
<symbol>-</symbol>
</op>
<term>
<IntegerConstant>1</IntegerConstant>
</term>
</expression>
<symbol>;</symbol>
</letStatement>
</statement>
</statements>
<symbol>}</symbol>
</whileStatement>
</statement>
<statement>
<returnStatement>
<keyword>return</keyword>
<symbol>;</symbol>
</returnStatement>
</statement>
</statements>
<symbol>}</symbol>
</subroutineBody>
</subroutineDec>
<symbol>}</symbol>
</class>
